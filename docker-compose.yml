services:
  backend_django:
    container_name: open_courses_backend
    restart: always
    build:
      .
    ports:
      - "${PORT}:8000"
    volumes:
      - .:/open_courses
    networks:
      - open_courses_network
    depends_on:
      - postgres
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://0.0.0.0:8000 || exit 1" ]
      start_period: 10s
      interval: 15s
      timeout: 10s
      retries: 5
    command: bash -c "python3 manage.py runserver --settings=config.${DJANGO_SETTING_ENV} 0.0.0.0:8000"

  postgres:
    container_name: open_courses_postgres
    image: postgres:17.4
    volumes:
      - open_courses_postgres_data:/var/lib/postgresql/data
    networks:
      - open_courses_network
    env_file:
      - ./.env
    ports:
      - "${POSTGRES_OUT_PORT}:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      start_period: 2s
      interval: 3s
      timeout: 2s
      retries: 15
    restart: always

  pgadmin:
    container_name: open_courses_pgadmin
    image: 'docker.io/dpage/pgadmin4:latest'
    env_file:
      - ./.env
    networks:
      - open_courses_network
    ports:
      - "${PGADMIN_OUT_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin_config.json:/pgadmin4/servers.json
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  open_courses_postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
    open_courses_network:
        name: open_courses_network
        driver: bridge
